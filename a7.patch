diff --git a/java/org/cef/CefClient.java b/java/org/cef/CefClient.java
index 7f87bc5..740dd25 100644
--- a/java/org/cef/CefClient.java
+++ b/java/org/cef/CefClient.java
@@ -85,20 +85,6 @@ public class CefClient extends CefClientHandler
     private CefPrintHandler printHandler_ = null;
     private CefRequestHandler requestHandler_ = null;
     private boolean isDisposed_ = false;
-    private volatile CefBrowser focusedBrowser_ = null;
-    private final PropertyChangeListener propertyChangeListener = new PropertyChangeListener() {
-        @Override
-        public void propertyChange(PropertyChangeEvent evt) {
-            if (focusedBrowser_ != null) {
-                Component browserUI = focusedBrowser_.getUIComponent();
-                Object oldUI = evt.getOldValue();
-                if (isPartOf(oldUI, browserUI)) {
-                    focusedBrowser_.setFocus(false);
-                    focusedBrowser_ = null;
-                }
-            }
-        }
-    };
 
     /**
      * The CTOR is only accessible within this package.
@@ -108,20 +94,6 @@ public class CefClient extends CefClientHandler
      */
     CefClient() throws UnsatisfiedLinkError {
         super();
-
-        KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(
-                propertyChangeListener);
-    }
-
-    private boolean isPartOf(Object obj, Component browserUI) {
-        if (obj == browserUI) return true;
-        if (obj instanceof Container) {
-            Component childs[] = ((Container) obj).getComponents();
-            for (Component child : childs) {
-                return isPartOf(child, browserUI);
-            }
-        }
-        return false;
     }
 
     @Override
@@ -133,15 +105,15 @@ public class CefClient extends CefClientHandler
     // CefClientHandler
 
     public CefBrowser createBrowser(
-            String url, boolean isOffscreenRendered, boolean isTransparent) {
-        return createBrowser(url, isOffscreenRendered, isTransparent, null);
+            String url, boolean isTransparent) {
+        return createBrowser(url, isTransparent, null);
     }
 
-    public CefBrowser createBrowser(String url, boolean isOffscreenRendered, boolean isTransparent,
+    public CefBrowser createBrowser(String url, boolean isTransparent,
             CefRequestContext context) {
         if (isDisposed_)
             throw new IllegalStateException("Can't create browser. CefClient is disposed");
-        return CefBrowserFactory.create(this, url, isOffscreenRendered, isTransparent, context);
+        return CefBrowserFactory.create(this, url, isTransparent, context);
     }
 
     @Override
@@ -405,27 +377,6 @@ public class CefClient extends CefClientHandler
     public void onTakeFocus(CefBrowser browser, boolean next) {
         if (browser == null) return;
 
-        browser.setFocus(false);
-        Container parent = browser.getUIComponent().getParent();
-        if (parent != null) {
-            FocusTraversalPolicy policy = null;
-            while (parent != null) {
-                policy = parent.getFocusTraversalPolicy();
-                if (policy != null) break;
-                parent = parent.getParent();
-            }
-            if (policy != null) {
-                Component nextComp = next
-                        ? policy.getComponentAfter(parent, browser.getUIComponent())
-                        : policy.getComponentBefore(parent, browser.getUIComponent());
-                if (nextComp == null) {
-                    policy.getDefaultComponent(parent).requestFocus();
-                } else {
-                    nextComp.requestFocus();
-                }
-            }
-        }
-        focusedBrowser_ = null;
         if (focusHandler_ != null) focusHandler_.onTakeFocus(browser, next);
     }
 
@@ -442,8 +393,6 @@ public class CefClient extends CefClientHandler
     public void onGotFocus(CefBrowser browser) {
         if (browser == null) return;
 
-        focusedBrowser_ = browser;
-        browser.setFocus(true);
         if (focusHandler_ != null) focusHandler_.onGotFocus(browser);
     }
 
@@ -584,8 +533,6 @@ public class CefClient extends CefClientHandler
             }
 
             if (browser_.isEmpty() && isDisposed_) {
-                KeyboardFocusManager.getCurrentKeyboardFocusManager().removePropertyChangeListener(
-                        propertyChangeListener);
                 removeContextMenuHandler(this);
                 removeDialogHandler(this);
                 removeDisplayHandler(this);
diff --git a/java/org/cef/browser/CefBrowser.java b/java/org/cef/browser/CefBrowser.java
index 43ae8f6..6f5e9fa 100644
--- a/java/org/cef/browser/CefBrowser.java
+++ b/java/org/cef/browser/CefBrowser.java
@@ -14,7 +14,6 @@ import org.cef.handler.CefWindowHandler;
 import org.cef.misc.CefPdfPrintSettings;
 import org.cef.network.CefRequest;
 
-import java.awt.Component;
 import java.awt.Point;
 import java.awt.image.BufferedImage;
 import java.util.Vector;
@@ -31,12 +30,6 @@ public interface CefBrowser {
      */
     public void createImmediately();
 
-    /**
-     * Get the underlying UI component (e.g. java.awt.Canvas).
-     * @return The underlying UI component.
-     */
-    public Component getUIComponent();
-
     /**
      * Get the client associated with this browser.
      * @return The browser client.
@@ -380,4 +373,16 @@ public interface CefBrowser {
      * @throws UnsupportedOperationException if not supported
      */
     public CompletableFuture<BufferedImage> createScreenshot(boolean nativeResolution);
+
+    /**
+     * Get the windowless max frame rate
+     * @return The max frame rate
+     */
+    public int getWindowlessFrameRate();
+
+    /**
+     * Set the windowless max frame rate
+     * @param framerate The frame rate
+     */
+    public void setWindowlessFrameRate(int framerate);
 }
diff --git a/java/org/cef/browser/CefBrowserFactory.java b/java/org/cef/browser/CefBrowserFactory.java
index 708d0f2..98a1678 100644
--- a/java/org/cef/browser/CefBrowserFactory.java
+++ b/java/org/cef/browser/CefBrowserFactory.java
@@ -10,9 +10,8 @@ import org.cef.CefClient;
  * Creates a new instance of CefBrowser according the passed values
  */
 public class CefBrowserFactory {
-    public static CefBrowser create(CefClient client, String url, boolean isOffscreenRendered,
+    public static CefBrowser create(CefClient client, String url,
             boolean isTransparent, CefRequestContext context) {
-        if (isOffscreenRendered) return new CefBrowserOsr(client, url, isTransparent, context);
-        return new CefBrowserWr(client, url, context);
+        return new CefBrowserOsr(client, url, isTransparent, context);
     }
 }
diff --git a/java/org/cef/browser/CefBrowserOsr.java b/java/org/cef/browser/CefBrowserOsr.java
index 902bc86..9e79df1 100644
--- a/java/org/cef/browser/CefBrowserOsr.java
+++ b/java/org/cef/browser/CefBrowserOsr.java
@@ -4,68 +4,21 @@
 
 package org.cef.browser;
 
-import com.jogamp.nativewindow.NativeSurface;
-import com.jogamp.opengl.GL;
-import com.jogamp.opengl.GL2;
-import com.jogamp.opengl.GLAutoDrawable;
-import com.jogamp.opengl.GLCapabilities;
-import com.jogamp.opengl.GLContext;
-import com.jogamp.opengl.GLEventListener;
-import com.jogamp.opengl.GLProfile;
-import com.jogamp.opengl.awt.GLCanvas;
-import com.jogamp.opengl.util.GLBuffers;
-
 import org.cef.CefClient;
-import org.cef.OS;
 import org.cef.callback.CefDragData;
 import org.cef.handler.CefRenderHandler;
 import org.cef.handler.CefScreenInfo;
 
 import java.awt.Component;
-import java.awt.Cursor;
-import java.awt.Graphics;
-import java.awt.Graphics2D;
-import java.awt.GraphicsConfiguration;
 import java.awt.Point;
 import java.awt.Rectangle;
-import java.awt.datatransfer.StringSelection;
 import java.awt.dnd.DnDConstants;
-import java.awt.dnd.DragGestureEvent;
 import java.awt.dnd.DragGestureRecognizer;
 import java.awt.dnd.DragSource;
-import java.awt.dnd.DragSourceAdapter;
-import java.awt.dnd.DragSourceDropEvent;
-import java.awt.dnd.DropTarget;
-import java.awt.event.FocusEvent;
-import java.awt.event.FocusListener;
-import java.awt.event.KeyEvent;
-import java.awt.event.KeyListener;
 import java.awt.event.MouseEvent;
-import java.awt.event.MouseListener;
-import java.awt.event.MouseMotionListener;
-import java.awt.event.MouseWheelEvent;
-import java.awt.event.MouseWheelListener;
-import java.awt.geom.AffineTransform;
-import java.awt.image.AffineTransformOp;
 import java.awt.image.BufferedImage;
-import java.lang.ClassNotFoundException;
-import java.lang.IllegalAccessException;
-import java.lang.IllegalArgumentException;
-import java.lang.NoSuchMethodException;
-import java.lang.SecurityException;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
 import java.nio.ByteBuffer;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.concurrent.Callable;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.TimeoutException;
-
-import javax.swing.MenuSelectionManager;
-import javax.swing.SwingUtilities;
 
 /**
  * This class represents an off-screen rendered browser.
@@ -73,9 +26,6 @@ import javax.swing.SwingUtilities;
  * CefBrowser instance, please use CefBrowserFactory.
  */
 class CefBrowserOsr extends CefBrowser_N implements CefRenderHandler {
-    private CefRenderer renderer_;
-    private GLCanvas canvas_;
-    private long window_handle_ = 0;
     private boolean justCreated_ = false;
     private Rectangle browser_rect_ = new Rectangle(0, 0, 1, 1); // Work around CEF issue #1437.
     private Point screenPoint_ = new Point(0, 0);
@@ -92,8 +42,6 @@ class CefBrowserOsr extends CefBrowser_N implements CefRenderHandler {
             CefRequestContext context, CefBrowserOsr parent, Point inspectAt) {
         super(client, url, context, parent, inspectAt);
         isTransparent_ = transparent;
-        renderer_ = new CefRenderer(transparent);
-        createGLCanvas();
     }
 
     @Override
@@ -103,11 +51,6 @@ class CefBrowserOsr extends CefBrowser_N implements CefRenderHandler {
         createBrowserIfRequired(false);
     }
 
-    @Override
-    public Component getUIComponent() {
-        return canvas_;
-    }
-
     @Override
     public CefRenderHandler getRenderHandler() {
         return this;
@@ -120,215 +63,6 @@ class CefBrowserOsr extends CefBrowser_N implements CefRenderHandler {
                 client, url, isTransparent_, context, (CefBrowserOsr) this, inspectAt);
     }
 
-    private synchronized long getWindowHandle() {
-        if (window_handle_ == 0) {
-            NativeSurface surface = canvas_.getNativeSurface();
-            if (surface != null) {
-                surface.lockSurface();
-                window_handle_ = getWindowHandle(surface.getSurfaceHandle());
-                surface.unlockSurface();
-                assert (window_handle_ != 0);
-            }
-        }
-        return window_handle_;
-    }
-
-    @SuppressWarnings("serial")
-    private void createGLCanvas() {
-        GLProfile glprofile = GLProfile.getMaxFixedFunc(true);
-        GLCapabilities glcapabilities = new GLCapabilities(glprofile);
-        canvas_ = new GLCanvas(glcapabilities) {
-            private Method scaleFactorAccessor = null;
-            private boolean removed_ = true;
-
-            @Override
-            public void paint(Graphics g) {
-                createBrowserIfRequired(true);
-                if (g instanceof Graphics2D) {
-                    GraphicsConfiguration config = ((Graphics2D) g).getDeviceConfiguration();
-                    depth = config.getColorModel().getPixelSize();
-                    depth_per_component = config.getColorModel().getComponentSize()[0];
-
-                    if (OS.isMacintosh()
-                            && System.getProperty("java.runtime.version").startsWith("1.8")) {
-                        // This fixes a weird thing on MacOS: the scale factor being read from
-                        // getTransform().getScaleX() is incorrect for Java 8 VMs; it is always
-                        // 1, even though Retina display scaling of window sizes etc. is
-                        // definitely ongoing somewhere in the lower levels of AWT. This isn't
-                        // too big of a problem for us, because the transparent scaling handles
-                        // the situation, except for one thing: the screenshot-grabbing
-                        // code below, which reads from the OpenGL context, must know the real
-                        // scale factor, because the image to be read is larger by that factor
-                        // and thus a bigger buffer is required. This is why there's some
-                        // admittedly-ugly reflection magic going on below that's able to get
-                        // the real scale factor.
-                        // All of this is not relevant for either Windows or MacOS JDKs > 8,
-                        // for which the official "getScaleX()" approach works fine.
-                        try {
-                            if (scaleFactorAccessor == null) {
-                                scaleFactorAccessor = getClass()
-                                                              .getClassLoader()
-                                                              .loadClass("sun.awt.CGraphicsDevice")
-                                                              .getDeclaredMethod("getScaleFactor");
-                            }
-                            Object factor = scaleFactorAccessor.invoke(config.getDevice());
-                            if (factor instanceof Integer) {
-                                scaleFactor_ = ((Integer) factor).doubleValue();
-                            } else {
-                                scaleFactor_ = 1.0;
-                            }
-                        } catch (InvocationTargetException | IllegalAccessException
-                                | IllegalArgumentException | NoSuchMethodException
-                                | SecurityException | ClassNotFoundException exc) {
-                            scaleFactor_ = 1.0;
-                        }
-                    } else {
-                        scaleFactor_ = ((Graphics2D) g).getTransform().getScaleX();
-                    }
-                }
-                super.paint(g);
-            }
-
-            @Override
-            public void addNotify() {
-                super.addNotify();
-                if (removed_) {
-                    notifyAfterParentChanged();
-                    removed_ = false;
-                }
-            }
-
-            @Override
-            public void removeNotify() {
-                if (!removed_) {
-                    if (!isClosed()) {
-                        notifyAfterParentChanged();
-                    }
-                    removed_ = true;
-                }
-                super.removeNotify();
-            }
-        };
-
-        // The GLContext will be re-initialized when changing displays, resulting in calls to
-        // dispose/init/reshape.
-        canvas_.addGLEventListener(new GLEventListener() {
-            @Override
-            public void reshape(
-                    GLAutoDrawable glautodrawable, int x, int y, int width, int height) {
-                int newWidth = width;
-                int newHeight = height;
-                if (OS.isMacintosh()) {
-                    // HiDPI display scale correction support code
-                    // For some reason this does seem to be necessary on MacOS only.
-                    // If doing this correction on Windows, the browser content would be too
-                    // small and in the lower left corner of the canvas only.
-                    newWidth = (int) (width / scaleFactor_);
-                    newHeight = (int) (height / scaleFactor_);
-                }
-                browser_rect_.setBounds(x, y, newWidth, newHeight);
-                screenPoint_ = canvas_.getLocationOnScreen();
-                wasResized(newWidth, newHeight);
-            }
-
-            @Override
-            public void init(GLAutoDrawable glautodrawable) {
-                renderer_.initialize(glautodrawable.getGL().getGL2());
-            }
-
-            @Override
-            public void dispose(GLAutoDrawable glautodrawable) {
-                renderer_.cleanup(glautodrawable.getGL().getGL2());
-            }
-
-            @Override
-            public void display(GLAutoDrawable glautodrawable) {
-                renderer_.render(glautodrawable.getGL().getGL2());
-            }
-        });
-
-        canvas_.addMouseListener(new MouseListener() {
-            @Override
-            public void mousePressed(MouseEvent e) {
-                sendMouseEvent(e);
-            }
-
-            @Override
-            public void mouseReleased(MouseEvent e) {
-                sendMouseEvent(e);
-            }
-
-            @Override
-            public void mouseEntered(MouseEvent e) {
-                sendMouseEvent(e);
-            }
-
-            @Override
-            public void mouseExited(MouseEvent e) {
-                sendMouseEvent(e);
-            }
-
-            @Override
-            public void mouseClicked(MouseEvent e) {
-                sendMouseEvent(e);
-            }
-        });
-
-        canvas_.addMouseMotionListener(new MouseMotionListener() {
-            @Override
-            public void mouseMoved(MouseEvent e) {
-                sendMouseEvent(e);
-            }
-
-            @Override
-            public void mouseDragged(MouseEvent e) {
-                sendMouseEvent(e);
-            }
-        });
-
-        canvas_.addMouseWheelListener(new MouseWheelListener() {
-            @Override
-            public void mouseWheelMoved(MouseWheelEvent e) {
-                sendMouseWheelEvent(e);
-            }
-        });
-
-        canvas_.addKeyListener(new KeyListener() {
-            @Override
-            public void keyTyped(KeyEvent e) {
-                sendKeyEvent(e);
-            }
-
-            @Override
-            public void keyPressed(KeyEvent e) {
-                sendKeyEvent(e);
-            }
-
-            @Override
-            public void keyReleased(KeyEvent e) {
-                sendKeyEvent(e);
-            }
-        });
-
-        canvas_.setFocusable(true);
-        canvas_.addFocusListener(new FocusListener() {
-            @Override
-            public void focusLost(FocusEvent e) {
-                setFocus(false);
-            }
-
-            @Override
-            public void focusGained(FocusEvent e) {
-                // Dismiss any Java menus that are currently displayed.
-                MenuSelectionManager.defaultManager().clearSelectedPath();
-                setFocus(true);
-            }
-        });
-
-        // Connect the Canvas with a drag and drop listener.
-        new DropTarget(canvas_, new CefDropTargetListener(this));
-    }
-
     @Override
     public Rectangle getViewRect(CefBrowser browser) {
         return browser_rect_;
@@ -343,50 +77,19 @@ class CefBrowserOsr extends CefBrowser_N implements CefRenderHandler {
 
     @Override
     public void onPopupShow(CefBrowser browser, boolean show) {
-        if (!show) {
-            renderer_.clearPopupRects();
-            invalidate();
-        }
     }
 
     @Override
     public void onPopupSize(CefBrowser browser, Rectangle size) {
-        renderer_.onPopupSize(size);
     }
 
     @Override
     public void onPaint(CefBrowser browser, boolean popup, Rectangle[] dirtyRects,
             ByteBuffer buffer, int width, int height) {
-        // if window is closing, canvas_ or opengl context could be null
-        final GLContext context = canvas_ != null ? canvas_.getContext() : null;
-
-        if (context == null) {
-            return;
-        }
-
-        // This result can occur due to GLContext re-initialization when changing displays.
-        if (context.makeCurrent() == GLContext.CONTEXT_NOT_CURRENT) {
-            return;
-        }
-
-        renderer_.onPaint(canvas_.getGL().getGL2(), popup, dirtyRects, buffer, width, height);
-        context.release();
-        SwingUtilities.invokeLater(new Runnable() {
-            public void run() {
-                canvas_.display();
-            }
-        });
     }
 
     @Override
     public boolean onCursorChange(CefBrowser browser, final int cursorType) {
-        SwingUtilities.invokeLater(new Runnable() {
-            public void run() {
-                canvas_.setCursor(new Cursor(cursorType));
-            }
-        });
-
-        // OSR always handles the cursor change.
         return true;
     }
 
@@ -419,35 +122,15 @@ class CefBrowserOsr extends CefBrowser_N implements CefRenderHandler {
 
     @Override
     public boolean startDragging(CefBrowser browser, CefDragData dragData, int mask, int x, int y) {
-        int action = getDndAction(mask);
-        MouseEvent triggerEvent =
-                new MouseEvent(canvas_, MouseEvent.MOUSE_DRAGGED, 0, 0, x, y, 0, false);
-        DragGestureEvent ev = new DragGestureEvent(
-                new SyntheticDragGestureRecognizer(canvas_, action, triggerEvent), action,
-                new Point(x, y), new ArrayList<>(Arrays.asList(triggerEvent)));
-
-        DragSource.getDefaultDragSource().startDrag(ev, /*dragCursor=*/null,
-                new StringSelection(dragData.getFragmentText()), new DragSourceAdapter() {
-                    @Override
-                    public void dragDropEnd(DragSourceDropEvent dsde) {
-                        dragSourceEndedAt(dsde.getLocation(), action);
-                        dragSourceSystemDragEnded();
-                    }
-                });
         return true;
     }
 
     @Override
     public void updateDragCursor(CefBrowser browser, int operation) {
-        // TODO: Consider calling onCursorChange() if we want different cursors based on
-        // |operation|.
     }
 
     private void createBrowserIfRequired(boolean hasParent) {
         long windowHandle = 0;
-        if (hasParent) {
-            windowHandle = getWindowHandle();
-        }
 
         if (getNativeRef("CefBrowser") == 0) {
             if (getParentBrowser() != null) {
@@ -480,159 +163,6 @@ class CefBrowserOsr extends CefBrowser_N implements CefRenderHandler {
 
     @Override
     public CompletableFuture<BufferedImage> createScreenshot(boolean nativeResolution) {
-        int width = (int) Math.ceil(canvas_.getWidth() * scaleFactor_);
-        int height = (int) Math.ceil(canvas_.getHeight() * scaleFactor_);
-
-        // In order to grab a screenshot of the browser window, we need to get the OpenGL internals
-        // from the GLCanvas that displays the browser.
-        GL2 gl = canvas_.getGL().getGL2();
-        int textureId = renderer_.getTextureID();
-
-        // This mirrors the two ways in which CefRenderer may render images internally - either via
-        // an incrementally updated texture that is the same size as the window and simply rendered
-        // onto a textured quad by graphics hardware, in which case we capture the data directly
-        // from this texture, or by directly writing pixels into the OpenGL framebuffer, in which
-        // case we directly read those pixels back. The latter is the way chosen if there is no
-        // hardware rasterizer capability detected. We can simply distinguish both approaches by
-        // looking whether the textureId of the renderer is a valid (non-zero) one.
-        boolean useReadPixels = (textureId == 0);
-
-        // This Callable encapsulates the pixel-reading code. After running it, the screenshot
-        // BufferedImage contains the grabbed image.
-        final Callable<BufferedImage> pixelGrabberCallable = new Callable<BufferedImage>() {
-            @Override
-            public BufferedImage call() {
-                BufferedImage screenshot =
-                        new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
-                ByteBuffer buffer = GLBuffers.newDirectByteBuffer(width * height * 4);
-
-                gl.getContext().makeCurrent();
-                try {
-                    if (useReadPixels) {
-                        // If pixels are copied directly to the framebuffer, we also directly read
-                        // them back.
-                        gl.glReadPixels(
-                                0, 0, width, height, GL.GL_RGBA, GL.GL_UNSIGNED_BYTE, buffer);
-                    } else {
-                        // In this case, read the texture pixel data from the previously-retrieved
-                        // texture ID
-                        gl.glEnable(GL.GL_TEXTURE_2D);
-                        gl.glBindTexture(GL.GL_TEXTURE_2D, textureId);
-                        gl.glGetTexImage(
-                                GL.GL_TEXTURE_2D, 0, GL.GL_RGBA, GL.GL_UNSIGNED_BYTE, buffer);
-                        gl.glDisable(GL.GL_TEXTURE_2D);
-                    }
-                } finally {
-                    gl.getContext().release();
-                }
-
-                for (int y = 0; y < height; y++) {
-                    for (int x = 0; x < width; x++) {
-                        // The OpenGL functions only support RGBA, while Java BufferedImage uses
-                        // ARGB. We must convert.
-                        int r = (buffer.get() & 0xff);
-                        int g = (buffer.get() & 0xff);
-                        int b = (buffer.get() & 0xff);
-                        int a = (buffer.get() & 0xff);
-                        int argb = (a << 24) | (r << 16) | (g << 8) | (b << 0);
-                        // If pixels were read from the framebuffer, we have to flip the resulting
-                        // image on the Y axis, as the OpenGL framebuffer's y axis starts at the
-                        // bottom of the image pointing "upwards", while BufferedImage has the
-                        // origin in the upper left corner. This flipping is done when drawing into
-                        // the BufferedImage.
-                        screenshot.setRGB(x, useReadPixels ? (height - y - 1) : y, argb);
-                    }
-                }
-
-                if (!nativeResolution && scaleFactor_ != 1.0) {
-                    // HiDPI images should be resized down to "normal" levels
-                    BufferedImage resized =
-                            new BufferedImage((int) (screenshot.getWidth() / scaleFactor_),
-                                    (int) (screenshot.getHeight() / scaleFactor_),
-                                    BufferedImage.TYPE_INT_ARGB);
-                    AffineTransform tempTransform = new AffineTransform();
-                    tempTransform.scale(1.0 / scaleFactor_, 1.0 / scaleFactor_);
-                    AffineTransformOp tempScaleOperation =
-                            new AffineTransformOp(tempTransform, AffineTransformOp.TYPE_BILINEAR);
-                    resized = tempScaleOperation.filter(screenshot, resized);
-                    return resized;
-                } else {
-                    return screenshot;
-                }
-            }
-        };
-
-        if (SwingUtilities.isEventDispatchThread()) {
-            // If called on the AWT event thread, just access the GL API
-            try {
-                BufferedImage screenshot = pixelGrabberCallable.call();
-                return CompletableFuture.completedFuture(screenshot);
-            } catch (Exception e) {
-                CompletableFuture<BufferedImage> future = new CompletableFuture<BufferedImage>();
-                future.completeExceptionally(e);
-                return future;
-            }
-        } else {
-            // If called from another thread, register a GLEventListener and trigger an async
-            // redraw, during which we use the GL API to grab the pixel data. An unresolved Future
-            // is returned, on which the caller can wait for a result (but not with the Event
-            // Thread, as we need that for pixel grabbing, which is why there's a safeguard in place
-            // to catch that situation if it accidentally happens).
-            CompletableFuture<BufferedImage> future = new CompletableFuture<BufferedImage>() {
-                private void safeguardGet() {
-                    if (SwingUtilities.isEventDispatchThread()) {
-                        throw new RuntimeException(
-                                "Waiting on this Future using the AWT Event Thread is illegal, "
-                                + "because it can potentially deadlock the thread.");
-                    }
-                }
-
-                @Override
-                public BufferedImage get() throws InterruptedException, ExecutionException {
-                    safeguardGet();
-                    return super.get();
-                }
-
-                @Override
-                public BufferedImage get(long timeout, TimeUnit unit)
-                        throws InterruptedException, ExecutionException, TimeoutException {
-                    safeguardGet();
-                    return super.get(timeout, unit);
-                }
-            };
-            canvas_.addGLEventListener(new GLEventListener() {
-                @Override
-                public void reshape(
-                        GLAutoDrawable aDrawable, int aArg1, int aArg2, int aArg3, int aArg4) {
-                    // ignore
-                }
-
-                @Override
-                public void init(GLAutoDrawable aDrawable) {
-                    // ignore
-                }
-
-                @Override
-                public void dispose(GLAutoDrawable aDrawable) {
-                    // ignore
-                }
-
-                @Override
-                public void display(GLAutoDrawable aDrawable) {
-                    canvas_.removeGLEventListener(this);
-                    try {
-                        future.complete(pixelGrabberCallable.call());
-                    } catch (Exception e) {
-                        future.completeExceptionally(e);
-                    }
-                }
-            });
-
-            // This repaint triggers an indirect call to the listeners' display method above, which
-            // ultimately completes the future that we return immediately.
-            canvas_.repaint();
-
-            return future;
-        }
+        return null;
     }
 }
diff --git a/java/org/cef/browser/CefBrowser_N.java b/java/org/cef/browser/CefBrowser_N.java
index 406d025..58c5f26 100644
--- a/java/org/cef/browser/CefBrowser_N.java
+++ b/java/org/cef/browser/CefBrowser_N.java
@@ -5,12 +5,14 @@
 package org.cef.browser;
 
 import org.cef.CefClient;
-import org.cef.browser.CefRequestContext;
 import org.cef.callback.CefDragData;
 import org.cef.callback.CefNativeAdapter;
 import org.cef.callback.CefPdfPrintCallback;
 import org.cef.callback.CefRunFileDialogCallback;
 import org.cef.callback.CefStringVisitor;
+import org.cef.event.CefKeyEvent;
+import org.cef.event.CefMouseEvent;
+import org.cef.event.CefMouseWheelEvent;
 import org.cef.handler.CefClientHandler;
 import org.cef.handler.CefDialogHandler.FileDialogMode;
 import org.cef.handler.CefRenderHandler;
@@ -18,19 +20,11 @@ import org.cef.handler.CefWindowHandler;
 import org.cef.misc.CefPdfPrintSettings;
 import org.cef.network.CefRequest;
 
-import java.awt.Canvas;
 import java.awt.Component;
 import java.awt.Point;
 import java.awt.Rectangle;
-import java.awt.Window;
-import java.awt.event.KeyEvent;
-import java.awt.event.MouseEvent;
-import java.awt.event.MouseWheelEvent;
-import java.awt.event.WindowEvent;
 import java.util.Vector;
 
-import javax.swing.SwingUtilities;
-
 /**
  * This class represents all methods which are connected to the
  * native counterpart CEF.
@@ -105,18 +99,6 @@ abstract class CefBrowser_N extends CefNativeAdapter implements CefBrowser {
             return false;
         }
 
-        SwingUtilities.invokeLater(new Runnable() {
-            @Override
-            public void run() {
-                // Trigger close of the parent window.
-                Component parent = SwingUtilities.getRoot(getUIComponent());
-                if (parent != null) {
-                    parent.dispatchEvent(
-                            new WindowEvent((Window) parent, WindowEvent.WINDOW_CLOSING));
-                }
-            }
-        });
-
         // Cancel the close.
         return true;
     }
@@ -595,7 +577,7 @@ abstract class CefBrowser_N extends CefNativeAdapter implements CefBrowser {
      * Send a key event.
      * @param e The event to send.
      */
-    protected final void sendKeyEvent(KeyEvent e) {
+    protected final void sendKeyEvent(CefKeyEvent e) {
         try {
             N_SendKeyEvent(e);
         } catch (UnsatisfiedLinkError ule) {
@@ -603,11 +585,30 @@ abstract class CefBrowser_N extends CefNativeAdapter implements CefBrowser {
         }
     }
 
+    /**
+     * Send a key event.
+     * @param type The event type
+     * @param modifiers The modifiers (ALT / CTRL / SHIFT etc)
+     * @param windowsKeyCode Windows key code
+     * @param nativeKeyCode Native key code
+     * @param isSystemKey If this is a system key
+     * @param character The typed character
+     * @param unmodifiedCharacter Unmodified typed character
+     * @param focusOnEditableField If we are focused on a editable field
+     */
+    protected final void sendDirectKeyEvent(int type, int modifiers, int windowsKeyCode, int nativeKeyCode, boolean isSystemKey, char character, char unmodifiedCharacter, boolean focusOnEditableField) {
+        try {
+            N_SendDirectKeyEvent(type, modifiers, windowsKeyCode, nativeKeyCode, isSystemKey, character, unmodifiedCharacter, focusOnEditableField);
+        } catch (UnsatisfiedLinkError ule) {
+            ule.printStackTrace();
+        }
+    }
+
     /**
      * Send a mouse event.
      * @param e The event to send.
      */
-    protected final void sendMouseEvent(MouseEvent e) {
+    protected final void sendMouseEvent(CefMouseEvent e) {
         try {
             N_SendMouseEvent(e);
         } catch (UnsatisfiedLinkError ule) {
@@ -619,7 +620,7 @@ abstract class CefBrowser_N extends CefNativeAdapter implements CefBrowser {
      * Send a mouse wheel event.
      * @param e The event to send.
      */
-    protected final void sendMouseWheelEvent(MouseWheelEvent e) {
+    protected final void sendMouseWheelEvent(CefMouseWheelEvent e) {
         try {
             N_SendMouseWheelEvent(e);
         } catch (UnsatisfiedLinkError ule) {
@@ -729,23 +730,32 @@ abstract class CefBrowser_N extends CefNativeAdapter implements CefBrowser {
         }
     }
 
-    protected final void setParent(long windowHandle, Component canvas) {
-        if (isClosing_ || isClosed_) return;
+    /**
+     * Call this method if the browser frame was moved.
+     * This fixes positioning of select popups and dismissal on window move/resize.
+     */
+    protected final void notifyMoveOrResizeStarted() {
+        try {
+            N_NotifyMoveOrResizeStarted();
+        } catch (UnsatisfiedLinkError ule) {
+            ule.printStackTrace();
+        }
+    }
 
+    @Override
+    public final int getWindowlessFrameRate() {
         try {
-            N_SetParent(windowHandle, canvas);
+            return N_GetWindowlessFrameRate();
         } catch (UnsatisfiedLinkError ule) {
             ule.printStackTrace();
         }
+        return 0;
     }
 
-    /**
-     * Call this method if the browser frame was moved.
-     * This fixes positioning of select popups and dismissal on window move/resize.
-     */
-    protected final void notifyMoveOrResizeStarted() {
+    @Override
+    public final void setWindowlessFrameRate(int framerate) {
         try {
-            N_NotifyMoveOrResizeStarted();
+            N_SetWindowlessFrameRate(framerate);
         } catch (UnsatisfiedLinkError ule) {
             ule.printStackTrace();
         }
@@ -801,9 +811,10 @@ abstract class CefBrowser_N extends CefNativeAdapter implements CefBrowser {
     private final native void N_ReplaceMisspelling(String word);
     private final native void N_WasResized(int width, int height);
     private final native void N_Invalidate();
-    private final native void N_SendKeyEvent(KeyEvent e);
-    private final native void N_SendMouseEvent(MouseEvent e);
-    private final native void N_SendMouseWheelEvent(MouseWheelEvent e);
+    private final native void N_SendKeyEvent(CefKeyEvent e);
+    private final native void N_SendDirectKeyEvent(int type, int modifiers, int windowsKeyCode, int nativeKeyCode, boolean isSystemKey, char character, char unmodifiedCharacter, boolean focusOnEditableField);
+    private final native void N_SendMouseEvent(CefMouseEvent e);
+    private final native void N_SendMouseWheelEvent(CefMouseWheelEvent e);
     private final native void N_DragTargetDragEnter(
             CefDragData dragData, Point pos, int modifiers, int allowed_ops);
     private final native void N_DragTargetDragOver(Point pos, int modifiers, int allowed_ops);
@@ -812,6 +823,7 @@ abstract class CefBrowser_N extends CefNativeAdapter implements CefBrowser {
     private final native void N_DragSourceEndedAt(Point pos, int operation);
     private final native void N_DragSourceSystemDragEnded();
     private final native void N_UpdateUI(Rectangle contentRect, Rectangle browserRect);
-    private final native void N_SetParent(long windowHandle, Component canvas);
     private final native void N_NotifyMoveOrResizeStarted();
+    private final native int N_GetWindowlessFrameRate();
+    private final native void N_SetWindowlessFrameRate(int framerate);
 }
diff --git a/java/org/cef/browser/mac/CefBrowserWindowMac.java b/java/org/cef/browser/mac/CefBrowserWindowMac.java
index 3239edc..7127bcf 100644
--- a/java/org/cef/browser/mac/CefBrowserWindowMac.java
+++ b/java/org/cef/browser/mac/CefBrowserWindowMac.java
@@ -7,39 +7,10 @@ package org.cef.browser.mac;
 import org.cef.browser.CefBrowserWindow;
 
 import java.awt.Component;
-import java.awt.peer.ComponentPeer;
-
-import sun.awt.AWTAccessor;
-import sun.lwawt.LWComponentPeer;
-import sun.lwawt.PlatformWindow;
-import sun.lwawt.macosx.CFRetainedResource;
-import sun.lwawt.macosx.CPlatformWindow;
 
 public class CefBrowserWindowMac implements CefBrowserWindow {
     @Override
     public long getWindowHandle(Component comp) {
-        final long[] result = new long[1];
-        while (comp != null) {
-            if (comp.isLightweight()) {
-                comp = comp.getParent();
-                continue;
-            }
-            ComponentPeer peer = AWTAccessor.getComponentAccessor().getPeer(comp);
-            if (peer instanceof LWComponentPeer) {
-                @SuppressWarnings("rawtypes")
-                PlatformWindow pWindow = ((LWComponentPeer) peer).getPlatformWindow();
-                if (pWindow instanceof CPlatformWindow) {
-                    ((CPlatformWindow) pWindow).execute(new CFRetainedResource.CFNativeAction() {
-                        @Override
-                        public void run(long l) {
-                            result[0] = l;
-                        }
-                    });
-                    break;
-                }
-            }
-            comp = comp.getParent();
-        }
-        return result[0];
+        return 0;
     }
 }
diff --git a/java/org/cef/event/CefKeyEvent.java b/java/org/cef/event/CefKeyEvent.java
index f895009..8f0e7a0 100644
--- a/java/org/cef/event/CefKeyEvent.java
+++ b/java/org/cef/event/CefKeyEvent.java
@@ -1,2 +1,39 @@
-package org.cef.event;public class CefKeyEvent {
+package org.cef.event;
+
+public class CefKeyEvent {
+    /* id constants */
+    public static final int KEY_PRESS = 1;
+    public static final int KEY_RELEASE = 0;
+    public static final int KEY_TYPE = 2;
+
+    // intentionally leaving these public for now may remove the getters, or maybe add setters, or maybe move to private
+    // not sure yet
+    public int keyCode;
+    public int id;
+    public int modifiers;
+    public char keyChar;
+    public long scancode;
+
+    public CefKeyEvent(int id, int keyCode, char keyChar, int modifiers) {
+        this.id = id;
+        this.keyCode = keyCode;
+        this.keyChar = keyChar;
+        this.modifiers = modifiers;
+    }
+
+    public int getID() {
+        return id;
+    }
+
+    public int getModifiers() {
+        return modifiers;
+    }
+
+    public char getKeyChar() {
+        return keyChar;
+    }
+
+    public int getKeyCode() {
+        return keyCode;
+    }
 }
diff --git a/java/org/cef/event/CefMouseEvent.java b/java/org/cef/event/CefMouseEvent.java
index da89382..4cb0afe 100644
--- a/java/org/cef/event/CefMouseEvent.java
+++ b/java/org/cef/event/CefMouseEvent.java
@@ -1,2 +1,53 @@
-package org.cef.event;public class CefMouseEvent {
+package org.cef.event;
+
+public class CefMouseEvent {
+    /* id constants */
+    public static final int MOUSE_MOVED = 503;
+    public static final int MOUSE_EXIT = 505;
+    /* modifier constants */
+    public static final int BUTTON1_MASK = 0x10;
+    public static final int BUTTON2_MASK = 0x20;
+    public static final int BUTTON3_MASK = 0x40;
+
+    // intentionally leaving these public for now may remove the getters, or maybe add setters, or maybe move to private
+    // not sure yet
+    public int id;
+    public int x;
+    public int y;
+    public int modifiers;
+    public int clickCount;
+    public int button;
+
+    public CefMouseEvent(int id, int x, int y, int clickCount, int button, int modifiers) {
+        this.id = id;
+        this.x = x;
+        this.y = y;
+        this.clickCount = clickCount;
+        this.button = button;
+        this.modifiers = modifiers;
+    }
+
+    public int getID() {
+        return id;
+    }
+
+    public int getX() {
+        return x;
+    }
+
+    public int getY() {
+        return y;
+    }
+
+    public int getModifiers() {
+        return modifiers;
+    }
+
+    public int getClickCount() {
+        return clickCount;
+    }
+
+    public int getButton() {
+        return button;
+    }
 }
diff --git a/java/org/cef/event/CefMouseWheelEvent.java b/java/org/cef/event/CefMouseWheelEvent.java
index e251d1d..f4e4c7c 100644
--- a/java/org/cef/event/CefMouseWheelEvent.java
+++ b/java/org/cef/event/CefMouseWheelEvent.java
@@ -1,4 +1,48 @@
 package org.cef.event;
 
 public class CefMouseWheelEvent {
+    /* id constants */
+    public static final int WHEEL_UNIT_SCROLL = 0;
+    public static final int WHEEL_BLOCK_SCROLL = 1;
+
+    // intentionally leaving these public for now may remove the getters, or maybe add setters, or maybe move to private
+    // not sure yet
+    public int id;
+    public double delta;
+    public int x;
+    public int y;
+    public int modifiers;
+    public int amount = 32; // TODO: might want to make this change dependent on system?
+
+    public CefMouseWheelEvent(int id, int x, int y, double delta, int modifiers) {
+        this.id = id;
+        this.x = x;
+        this.y = y;
+        this.delta = delta;
+        this.modifiers = modifiers;
+    }
+
+    public int getScrollType() {
+        return id;
+    }
+
+    public double getWheelRotation() {
+        return delta;
+    }
+
+    public int getX() {
+        return x;
+    }
+
+    public int getY() {
+        return y;
+    }
+
+    public int getModifiers() {
+        return modifiers;
+    }
+
+    public double getUnitsToScroll() {
+        return amount * delta;
+    }
 }
diff --git a/java/tests/detailed/BrowserFrame.java b/java/tests/detailed/BrowserFrame.java
index dedcd1f..25beacf 100644
--- a/java/tests/detailed/BrowserFrame.java
+++ b/java/tests/detailed/BrowserFrame.java
@@ -125,10 +125,8 @@ public class BrowserFrame extends JFrame {
     public void removeBrowser(Runnable r) {
         System.out.println("BrowserFrame.removeBrowser");
         afterParentChangedAction_ = r;
-        remove(browser_.getUIComponent());
         // The removeNotify() notification should be sent as a result of calling remove().
         // However, it isn't in all cases so we do it manually here.
-        browser_.getUIComponent().removeNotify();
         browser_ = null;
     }
 
diff --git a/java/tests/detailed/MainFrame.java b/java/tests/detailed/MainFrame.java
index f13b321..5568a2f 100644
--- a/java/tests/detailed/MainFrame.java
+++ b/java/tests/detailed/MainFrame.java
@@ -202,7 +202,7 @@ public class MainFrame extends BrowserFrame {
 
         // Create the browser.
         CefBrowser browser = client_.createBrowser(
-                "http://www.google.com", osrEnabled, transparentPaintingEnabled, null);
+                "http://www.google.com", transparentPaintingEnabled, null);
         setBrowser(browser);
 
         // Set up the UI for this example implementation.
@@ -239,7 +239,6 @@ public class MainFrame extends BrowserFrame {
         if (createImmediately) browser.createImmediately();
 
         // Add the browser to the UI.
-        contentPanel.add(getBrowser().getUIComponent(), BorderLayout.CENTER);
 
         MenuBar menuBar = new MenuBar(
                 this, browser, control_pane_, downloadDialog, CefCookieManager.getGlobalManager());
diff --git a/java/tests/detailed/dialog/DevToolsDialog.java b/java/tests/detailed/dialog/DevToolsDialog.java
index d1fb3d8..74a3a76 100644
--- a/java/tests/detailed/dialog/DevToolsDialog.java
+++ b/java/tests/detailed/dialog/DevToolsDialog.java
@@ -29,7 +29,6 @@ public class DevToolsDialog extends JDialog {
         setLocation(owner.getLocation().x + 20, owner.getLocation().y + 20);
 
         devTools_ = browser.getDevTools(inspectAt);
-        add(devTools_.getUIComponent());
 
         addComponentListener(new ComponentAdapter() {
             @Override
diff --git a/java/tests/detailed/ui/MenuBar.java b/java/tests/detailed/ui/MenuBar.java
index c69ae21..a6fe40b 100644
--- a/java/tests/detailed/ui/MenuBar.java
+++ b/java/tests/detailed/ui/MenuBar.java
@@ -408,7 +408,6 @@ public class MenuBar extends JMenuBar {
                         if (reparentButton.getText().equals("Reparent <")) {
                             owner_.removeBrowser(new Runnable() {
                                 public void run() {
-                                    newFrame.add(browser_.getUIComponent(), BorderLayout.CENTER);
                                     newFrame.setBrowser(browser_);
                                     reparentButton.setText("Reparent >");
                                     reparentPending_ = false;
@@ -420,7 +419,6 @@ public class MenuBar extends JMenuBar {
                                     JRootPane rootPane = (JRootPane) owner_.getComponent(0);
                                     Container container = rootPane.getContentPane();
                                     JPanel panel = (JPanel) container.getComponent(0);
-                                    panel.add(browser_.getUIComponent());
                                     owner_.setBrowser(browser_);
                                     owner_.revalidate();
                                     reparentButton.setText("Reparent <");
diff --git a/java/tests/junittests/TestFrame.java b/java/tests/junittests/TestFrame.java
index b789544..bdbc26a 100644
--- a/java/tests/junittests/TestFrame.java
+++ b/java/tests/junittests/TestFrame.java
@@ -105,10 +105,9 @@ class TestFrame extends JFrame implements CefLifeSpanHandler, CefLoadHandler, Ce
 
     protected void createBrowser(String startURL) {
         assertNull(browser_);
-        browser_ = client_.createBrowser(startURL, false /* useOSR */, false /* isTransparent */);
+        browser_ = client_.createBrowser(startURL, false /* isTransparent */);
         assertNotNull(browser_);
 
-        getContentPane().add(browser_.getUIComponent(), BorderLayout.CENTER);
         pack();
         setSize(800, 600);
         setVisible(true);
diff --git a/java/tests/simple/MainFrame.java b/java/tests/simple/MainFrame.java
index 7b2b21a..822c4c8 100644
--- a/java/tests/simple/MainFrame.java
+++ b/java/tests/simple/MainFrame.java
@@ -46,7 +46,6 @@ public class MainFrame extends JFrame {
     private final CefApp cefApp_;
     private final CefClient client_;
     private final CefBrowser browser_;
-    private final Component browerUI_;
     private boolean browserFocus_ = true;
 
     /**
@@ -104,8 +103,7 @@ public class MainFrame extends JFrame {
         //     by calling the method "getUIComponent()" on the instance of CefBrowser.
         //     The UI component is inherited from a java.awt.Component and therefore
         //     it can be embedded into any AWT UI.
-        browser_ = client_.createBrowser(startURL, useOSR, isTransparent);
-        browerUI_ = browser_.getUIComponent();
+        browser_ = client_.createBrowser(startURL, isTransparent);
 
         // (4) For this minimal browser, we need only a text field to enter an URL
         //     we want to navigate to and a CefBrowser window to display the content
@@ -160,7 +158,6 @@ public class MainFrame extends JFrame {
         // (5) All UI components are assigned to the default content pane of this
         //     JFrame and afterwards the frame is made visible to the user.
         getContentPane().add(address_, BorderLayout.NORTH);
-        getContentPane().add(browerUI_, BorderLayout.CENTER);
         pack();
         setSize(800, 600);
         setVisible(true);
diff --git a/native/CefBrowser_N.cpp b/native/CefBrowser_N.cpp
index c3c0881..76d019f 100644
--- a/native/CefBrowser_N.cpp
+++ b/native/CefBrowser_N.cpp
@@ -38,33 +38,34 @@
 #undef MOUSE_MOVED
 #endif
 
+#include <iostream>
+
 namespace {
 
-int GetCefModifiers(JNIEnv* env, jclass cls, int modifiers) {
-  JNI_STATIC_DEFINE_INT_RV(env, cls, ALT_DOWN_MASK, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, cls, BUTTON1_DOWN_MASK, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, cls, BUTTON2_DOWN_MASK, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, cls, BUTTON3_DOWN_MASK, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, cls, CTRL_DOWN_MASK, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, cls, META_DOWN_MASK, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, cls, SHIFT_DOWN_MASK, 0);
+int GetCefModifiersGlfw(JNIEnv* env, jclass cls, int modifiers) {
+  JNI_STATIC_DEFINE_INT_RV(env, cls, GLFW_MOD_ALT, 0);
+  JNI_STATIC_DEFINE_INT_RV(env, cls, GLFW_MOD_CONTROL, 0);
+  JNI_STATIC_DEFINE_INT_RV(env, cls, GLFW_MOD_SUPER, 0);
+  JNI_STATIC_DEFINE_INT_RV(env, cls, GLFW_MOD_SHIFT, 0);
 
   int cef_modifiers = 0;
-  if (modifiers & JNI_STATIC(ALT_DOWN_MASK))
+  if (modifiers & JNI_STATIC(GLFW_MOD_ALT))
     cef_modifiers |= EVENTFLAG_ALT_DOWN;
-  if (modifiers & JNI_STATIC(BUTTON1_DOWN_MASK))
+  if (modifiers & 0x10) // BUTTON1_MASK
     cef_modifiers |= EVENTFLAG_LEFT_MOUSE_BUTTON;
-  if (modifiers & JNI_STATIC(BUTTON2_DOWN_MASK))
+  if (modifiers & 0x20) // BUTTON2_MASK
     cef_modifiers |= EVENTFLAG_MIDDLE_MOUSE_BUTTON;
-  if (modifiers & JNI_STATIC(BUTTON3_DOWN_MASK))
+  if (modifiers & 0x40) // BUTTON3_MASK
     cef_modifiers |= EVENTFLAG_RIGHT_MOUSE_BUTTON;
-  if (modifiers & JNI_STATIC(CTRL_DOWN_MASK))
+  if (modifiers & JNI_STATIC(GLFW_MOD_CONTROL))
     cef_modifiers |= EVENTFLAG_CONTROL_DOWN;
-  if (modifiers & JNI_STATIC(META_DOWN_MASK))
+  if (modifiers & JNI_STATIC(GLFW_MOD_SUPER))
     cef_modifiers |= EVENTFLAG_COMMAND_DOWN;
-  if (modifiers & JNI_STATIC(SHIFT_DOWN_MASK))
+  if (modifiers & JNI_STATIC(GLFW_MOD_SHIFT))
     cef_modifiers |= EVENTFLAG_SHIFT_DOWN;
 
+  std::cout << "mcef " << modifiers << "\ncef  " << cef_modifiers << "\n" << std::flush;
+
   return cef_modifiers;
 }
 
@@ -968,6 +969,14 @@ void create(std::shared_ptr<JNIObjectsForCreate> objs,
     }
     windowInfo.SetAsChild(parent, rect);
 #endif
+  } else if (windowHandle != 0) {
+    CefRect rect;
+    CefRefPtr<WindowHandler> windowHandler =
+        (WindowHandler*)clientHandler->GetWindowHandler().get();
+    if (windowHandler.get()) {
+      windowHandler->GetRect(objs->jbrowser, rect);
+    }
+    windowInfo.SetAsChild((CefWindowHandle)windowHandle, rect);
   } else {
     windowInfo.SetAsWindowless((CefWindowHandle)windowHandle);
   }
@@ -1600,66 +1609,67 @@ Java_org_cef_browser_CefBrowser_1N_N_1SendKeyEvent(JNIEnv* env,
                                                    jobject obj,
                                                    jobject key_event) {
   CefRefPtr<CefBrowser> browser = JNI_GET_BROWSER_OR_RETURN(env, obj);
-  ScopedJNIClass cls(env, env->GetObjectClass(key_event));
-  if (!cls)
+  ScopedJNIClass cls(env, "org/lwjgl/glfw/GLFW");
+  ScopedJNIClass objClass = ScopedJNIClass(env, env->GetObjectClass(key_event));
+  if (!cls || !objClass)
     return;
 
-  JNI_STATIC_DEFINE_INT(env, cls, KEY_PRESSED);
-  JNI_STATIC_DEFINE_INT(env, cls, KEY_RELEASED);
-  JNI_STATIC_DEFINE_INT(env, cls, KEY_TYPED);
+  JNI_STATIC_DEFINE_INT(env, cls, GLFW_PRESS);
+  JNI_STATIC_DEFINE_INT(env, cls, GLFW_RELEASE);
+  JNI_STATIC_DEFINE_INT(env, cls, GLFW_REPEAT);
 
   int event_type, modifiers;
   char16_t key_char;
-  if (!CallJNIMethodI_V(env, cls, key_event, "getID", &event_type) ||
-      !CallJNIMethodC_V(env, cls, key_event, "getKeyChar", &key_char) ||
-      !CallJNIMethodI_V(env, cls, key_event, "getModifiersEx", &modifiers)) {
+  if (!CallJNIMethodI_V(env, objClass, key_event, "getID", &event_type) ||
+      !CallJNIMethodC_V(env, objClass, key_event, "getKeyChar", &key_char) ||
+      !CallJNIMethodI_V(env, objClass, key_event, "getModifiers", &modifiers)) {
     return;
   }
 
   CefKeyEvent cef_event;
-  cef_event.modifiers = GetCefModifiers(env, cls, modifiers);
+  cef_event.modifiers = GetCefModifiersGlfw(env, cls, modifiers);
 
 #if defined(OS_WIN)
 
   jlong scanCode = 0;
-  GetJNIFieldLong(env, cls, key_event, "scancode", &scanCode);
+  GetJNIFieldLong(env, objClass, key_event, "scancode", &scanCode);
   BYTE VkCode = LOBYTE(MapVirtualKey(scanCode, MAPVK_VSC_TO_VK));
   cef_event.native_key_code = (scanCode << 16) |  // key scan code
                               1;                  // key repeat count
 #elif defined(OS_LINUX) || defined(OS_MACOSX)
   int key_code;
-  if (!CallJNIMethodI_V(env, cls, key_event, "getKeyCode", &key_code)) {
+  if (!CallJNIMethodI_V(env, objClass, key_event, "getKeyCode", &key_code)) {
     return;
   }
 
-  JNI_STATIC_DEFINE_INT(env, cls, VK_BACK_SPACE);
-  JNI_STATIC_DEFINE_INT(env, cls, VK_DELETE);
-  JNI_STATIC_DEFINE_INT(env, cls, VK_DOWN);
-  JNI_STATIC_DEFINE_INT(env, cls, VK_ENTER);
-  JNI_STATIC_DEFINE_INT(env, cls, VK_ESCAPE);
-  JNI_STATIC_DEFINE_INT(env, cls, VK_LEFT);
-  JNI_STATIC_DEFINE_INT(env, cls, VK_RIGHT);
-  JNI_STATIC_DEFINE_INT(env, cls, VK_TAB);
-  JNI_STATIC_DEFINE_INT(env, cls, VK_UP);
+  JNI_STATIC_DEFINE_INT(env, cls, GLFW_KEY_BACKSPACE);
+  JNI_STATIC_DEFINE_INT(env, cls, GLFW_KEY_DELETE);
+  JNI_STATIC_DEFINE_INT(env, cls, GLFW_KEY_DOWN);
+  JNI_STATIC_DEFINE_INT(env, cls, GLFW_KEY_ENTER);
+  JNI_STATIC_DEFINE_INT(env, cls, GLFW_KEY_ESCAPE);
+  JNI_STATIC_DEFINE_INT(env, cls, GLFW_KEY_LEFT);
+  JNI_STATIC_DEFINE_INT(env, cls, GLFW_KEY_RIGHT);
+  JNI_STATIC_DEFINE_INT(env, cls, GLFW_KEY_TAB);
+  JNI_STATIC_DEFINE_INT(env, cls, GLFW_KEY_UP);
 
 #if defined(OS_LINUX)
-  if (key_code == JNI_STATIC(VK_BACK_SPACE))
+  if (key_code == JNI_STATIC(GLFW_KEY_BACKSPACE))
     cef_event.native_key_code = XK_BackSpace;
-  else if (key_code == JNI_STATIC(VK_DELETE))
+  else if (key_code == JNI_STATIC(GLFW_KEY_DELETE))
     cef_event.native_key_code = XK_Delete;
-  else if (key_code == JNI_STATIC(VK_DOWN))
+  else if (key_code == JNI_STATIC(GLFW_KEY_DOWN))
     cef_event.native_key_code = XK_Down;
-  else if (key_code == JNI_STATIC(VK_ENTER))
+  else if (key_code == JNI_STATIC(GLFW_KEY_ENTER))
     cef_event.native_key_code = XK_Return;
-  else if (key_code == JNI_STATIC(VK_ESCAPE))
+  else if (key_code == JNI_STATIC(GLFW_KEY_ESCAPE))
     cef_event.native_key_code = XK_Escape;
-  else if (key_code == JNI_STATIC(VK_LEFT))
+  else if (key_code == JNI_STATIC(GLFW_KEY_LEFT))
     cef_event.native_key_code = XK_Left;
-  else if (key_code == JNI_STATIC(VK_RIGHT))
+  else if (key_code == JNI_STATIC(GLFW_KEY_RIGHT))
     cef_event.native_key_code = XK_Right;
-  else if (key_code == JNI_STATIC(VK_TAB))
+  else if (key_code == JNI_STATIC(GLFW_KEY_TAB))
     cef_event.native_key_code = XK_Tab;
-  else if (key_code == JNI_STATIC(VK_UP))
+  else if (key_code == JNI_STATIC(GLFW_KEY_UP))
     cef_event.native_key_code = XK_Up;
   else
     cef_event.native_key_code = key_char;
@@ -1688,31 +1698,31 @@ Java_org_cef_browser_CefBrowser_1N_N_1SendKeyEvent(JNIEnv* env,
     cef_event.character = cef_event.unmodified_character;
   }
 #elif defined(OS_MACOSX)
-  if (key_code == JNI_STATIC(VK_BACK_SPACE)) {
+  if (key_code == JNI_STATIC(GLFW_KEY_BACKSPACE)) {
     cef_event.native_key_code = kVK_Delete;
     cef_event.unmodified_character = kBackspaceCharCode;
-  } else if (key_code == JNI_STATIC(VK_DELETE)) {
+  } else if (key_code == JNI_STATIC(GLFW_KEY_DELETE)) {
     cef_event.native_key_code = kVK_ForwardDelete;
     cef_event.unmodified_character = kDeleteCharCode;
-  } else if (key_code == JNI_STATIC(VK_DOWN)) {
+  } else if (key_code == JNI_STATIC(GLFW_KEY_DOWN)) {
     cef_event.native_key_code = kVK_DownArrow;
     cef_event.unmodified_character = /* NSDownArrowFunctionKey */ 0xF701;
-  } else if (key_code == JNI_STATIC(VK_ENTER)) {
+  } else if (key_code == JNI_STATIC(GLFW_KEY_ENTER)) {
     cef_event.native_key_code = kVK_Return;
     cef_event.unmodified_character = kReturnCharCode;
-  } else if (key_code == JNI_STATIC(VK_ESCAPE)) {
+  } else if (key_code == JNI_STATIC(GLFW_KEY_ESCAPE)) {
     cef_event.native_key_code = kVK_Escape;
     cef_event.unmodified_character = kEscapeCharCode;
-  } else if (key_code == JNI_STATIC(VK_LEFT)) {
+  } else if (key_code == JNI_STATIC(GLFW_KEY_LEFT)) {
     cef_event.native_key_code = kVK_LeftArrow;
     cef_event.unmodified_character = /* NSLeftArrowFunctionKey */ 0xF702;
-  } else if (key_code == JNI_STATIC(VK_RIGHT)) {
+  } else if (key_code == JNI_STATIC(GLFW_KEY_RIGHT)) {
     cef_event.native_key_code = kVK_RightArrow;
     cef_event.unmodified_character = /* NSRightArrowFunctionKey */ 0xF703;
-  } else if (key_code == JNI_STATIC(VK_TAB)) {
+  } else if (key_code == JNI_STATIC(GLFW_KEY_TAB)) {
     cef_event.native_key_code = kVK_Tab;
     cef_event.unmodified_character = kTabCharCode;
-  } else if (key_code == JNI_STATIC(VK_UP)) {
+  } else if (key_code == JNI_STATIC(GLFW_KEY_UP)) {
     cef_event.native_key_code = kVK_UpArrow;
     cef_event.unmodified_character = /* NSUpArrowFunctionKey */ 0xF700;
   } else {
@@ -1786,19 +1796,19 @@ Java_org_cef_browser_CefBrowser_1N_N_1SendKeyEvent(JNIEnv* env,
 #endif  // defined(OS_MACOSX)
 #endif  // defined(OS_LINUX) || defined(OS_MACOSX)
 
-  if (event_type == JNI_STATIC(KEY_PRESSED)) {
+  if (event_type == JNI_STATIC(GLFW_PRESS)) {
 #if defined(OS_WIN)
     cef_event.windows_key_code = VkCode;
 #endif
     cef_event.type = KEYEVENT_RAWKEYDOWN;
-  } else if (event_type == JNI_STATIC(KEY_RELEASED)) {
+  } else if (event_type == JNI_STATIC(GLFW_RELEASE)) {
 #if defined(OS_WIN)
     cef_event.windows_key_code = VkCode;
     // bits 30 and 31 should always be 1 for WM_KEYUP
     cef_event.native_key_code |= 0xC0000000;
 #endif
     cef_event.type = KEYEVENT_KEYUP;
-  } else if (event_type == JNI_STATIC(KEY_TYPED)) {
+  } else if (event_type == JNI_STATIC(GLFW_REPEAT)) {
 #if defined(OS_WIN)
     cef_event.windows_key_code = key_char;
 #endif
@@ -1810,6 +1820,30 @@ Java_org_cef_browser_CefBrowser_1N_N_1SendKeyEvent(JNIEnv* env,
   browser->GetHost()->SendKeyEvent(cef_event);
 }
 
+JNIEXPORT void JNICALL
+Java_org_cef_browser_CefBrowser_1N_N_1SendDirectKeyEvent(JNIEnv* env,
+                                                         jobject obj,
+                                                         jint type,
+                                                         jint modifiers,
+                                                         jint windows_key_code,
+                                                         jint native_key_code,
+                                                         jboolean is_system_key,
+                                                         jchar character,
+                                                         jchar unmodified_character,
+                                                         jboolean focus_on_editable_field) {
+  CefRefPtr<CefBrowser> browser = JNI_GET_BROWSER_OR_RETURN(env, obj);
+  CefKeyEvent cef_event;
+  cef_event.type = static_cast<cef_key_event_type_t>(type);
+  cef_event.modifiers = modifiers;
+  cef_event.windows_key_code = windows_key_code;
+  cef_event.native_key_code = native_key_code;
+  cef_event.is_system_key = is_system_key != JNI_FALSE ? 1 : 0;
+  cef_event.character = character;
+  cef_event.unmodified_character = unmodified_character;
+  cef_event.focus_on_editable_field = focus_on_editable_field != JNI_FALSE ? 1 : 0;
+  browser->GetHost()->SendKeyEvent(cef_event);
+}
+
 JNIEXPORT void JNICALL
 Java_org_cef_browser_CefBrowser_1N_N_1SendMouseEvent(JNIEnv* env,
                                                      jobject obj,
@@ -1833,7 +1867,7 @@ Java_org_cef_browser_CefBrowser_1N_N_1SendMouseEvent(JNIEnv* env,
   if (!CallJNIMethodI_V(env, cls, mouse_event, "getID", &event_type) ||
       !CallJNIMethodI_V(env, cls, mouse_event, "getX", &x) ||
       !CallJNIMethodI_V(env, cls, mouse_event, "getY", &y) ||
-      !CallJNIMethodI_V(env, cls, mouse_event, "getModifiersEx", &modifiers)) {
+      !CallJNIMethodI_V(env, cls, mouse_event, "getModifiers", &modifiers)) {
     return;
   }
 
@@ -1841,7 +1875,7 @@ Java_org_cef_browser_CefBrowser_1N_N_1SendMouseEvent(JNIEnv* env,
   cef_event.x = x;
   cef_event.y = y;
 
-  cef_event.modifiers = GetCefModifiers(env, cls, modifiers);
+  cef_event.modifiers = GetCefModifiersGlfw(env, cls, modifiers);
 
   if (event_type == JNI_STATIC(MOUSE_PRESSED) ||
       event_type == JNI_STATIC(MOUSE_RELEASED)) {
@@ -1880,20 +1914,22 @@ Java_org_cef_browser_CefBrowser_1N_N_1SendMouseWheelEvent(
     jobject obj,
     jobject mouse_wheel_event) {
   CefRefPtr<CefBrowser> browser = JNI_GET_BROWSER_OR_RETURN(env, obj);
-  ScopedJNIClass cls(env, env->GetObjectClass(mouse_wheel_event));
-  if (!cls)
+  ScopedJNIClass cls(env, "org/lwjgl/glfw/GLFW");
+  ScopedJNIClass objClass = ScopedJNIClass(env, env->GetObjectClass(mouse_wheel_event));
+  if (!cls || !objClass)
     return;
 
-  JNI_STATIC_DEFINE_INT(env, cls, WHEEL_UNIT_SCROLL);
+  JNI_STATIC_DEFINE_INT(env, objClass, WHEEL_UNIT_SCROLL);
 
-  int scroll_type, delta, x, y, modifiers;
-  if (!CallJNIMethodI_V(env, cls, mouse_wheel_event, "getScrollType",
+  int scroll_type, x, y, modifiers;
+  double delta;
+  if (!CallJNIMethodI_V(env, objClass, mouse_wheel_event, "getScrollType",
                         &scroll_type) ||
-      !CallJNIMethodI_V(env, cls, mouse_wheel_event, "getWheelRotation",
+      !CallJNIMethodD_V(env, objClass, mouse_wheel_event, "getWheelRotation",
                         &delta) ||
-      !CallJNIMethodI_V(env, cls, mouse_wheel_event, "getX", &x) ||
-      !CallJNIMethodI_V(env, cls, mouse_wheel_event, "getY", &y) ||
-      !CallJNIMethodI_V(env, cls, mouse_wheel_event, "getModifiersEx",
+      !CallJNIMethodI_V(env, objClass, mouse_wheel_event, "getX", &x) ||
+      !CallJNIMethodI_V(env, objClass, mouse_wheel_event, "getY", &y) ||
+      !CallJNIMethodI_V(env, objClass, mouse_wheel_event, "getModifiers",
                         &modifiers)) {
     return;
   }
@@ -1902,11 +1938,11 @@ Java_org_cef_browser_CefBrowser_1N_N_1SendMouseWheelEvent(
   cef_event.x = x;
   cef_event.y = y;
 
-  cef_event.modifiers = GetCefModifiers(env, cls, modifiers);
+  cef_event.modifiers = GetCefModifiersGlfw(env, cls, modifiers);
 
-  if (scroll_type == JNI_STATIC(WHEEL_UNIT_SCROLL)) {
+  if (scroll_type == 0) { // WHEEL_UNIT_SCROLL
     // Use the smarter version that considers platform settings.
-    CallJNIMethodI_V(env, cls, mouse_wheel_event, "getUnitsToScroll", &delta);
+    CallJNIMethodD_V(env, objClass, mouse_wheel_event, "getUnitsToScroll", &delta);
   }
 
   double deltaX = 0, deltaY = 0;
@@ -1929,13 +1965,13 @@ Java_org_cef_browser_CefBrowser_1N_N_1DragTargetDragEnter(JNIEnv* env,
       GetCefFromJNIObject<CefDragData>(env, jdragData, "CefDragData");
   if (!drag_data.get())
     return;
-  ScopedJNIClass cls(env, "java/awt/event/MouseEvent");
+  ScopedJNIClass cls(env, "org/lwjgl/glfw/GLFW");
   if (!cls)
     return;
 
   CefMouseEvent cef_event;
   GetJNIPoint(env, pos, &cef_event.x, &cef_event.y);
-  cef_event.modifiers = GetCefModifiers(env, cls, jmodifiers);
+  cef_event.modifiers = GetCefModifiersGlfw(env, cls, jmodifiers);
 
   CefRefPtr<CefBrowser> browser = JNI_GET_BROWSER_OR_RETURN(env, obj);
   browser->GetHost()->DragTargetDragEnter(
@@ -1948,13 +1984,13 @@ Java_org_cef_browser_CefBrowser_1N_N_1DragTargetDragOver(JNIEnv* env,
                                                          jobject pos,
                                                          jint jmodifiers,
                                                          jint allowedOps) {
-  ScopedJNIClass cls(env, "java/awt/event/MouseEvent");
+  ScopedJNIClass cls(env, "org/lwjgl/glfw/GLFW");
   if (!cls)
     return;
 
   CefMouseEvent cef_event;
   GetJNIPoint(env, pos, &cef_event.x, &cef_event.y);
-  cef_event.modifiers = GetCefModifiers(env, cls, jmodifiers);
+  cef_event.modifiers = GetCefModifiersGlfw(env, cls, jmodifiers);
 
   CefRefPtr<CefBrowser> browser = JNI_GET_BROWSER_OR_RETURN(env, obj);
   browser->GetHost()->DragTargetDragOver(
@@ -1973,13 +2009,13 @@ Java_org_cef_browser_CefBrowser_1N_N_1DragTargetDrop(JNIEnv* env,
                                                      jobject obj,
                                                      jobject pos,
                                                      jint jmodifiers) {
-  ScopedJNIClass cls(env, "java/awt/event/MouseEvent");
+  ScopedJNIClass cls(env, "org/lwjgl/glfw/GLFW");
   if (!cls)
     return;
 
   CefMouseEvent cef_event;
   GetJNIPoint(env, pos, &cef_event.x, &cef_event.y);
-  cef_event.modifiers = GetCefModifiers(env, cls, jmodifiers);
+  cef_event.modifiers = GetCefModifiersGlfw(env, cls, jmodifiers);
 
   CefRefPtr<CefBrowser> browser = JNI_GET_BROWSER_OR_RETURN(env, obj);
   browser->GetHost()->DragTargetDrop(cef_event);
@@ -2071,3 +2107,17 @@ Java_org_cef_browser_CefBrowser_1N_N_1NotifyMoveOrResizeStarted(JNIEnv* env,
   }
 #endif
 }
+
+JNIEXPORT jint JNICALL
+Java_org_cef_browser_CefBrowser_1N_N_1GetWindowlessFrameRate(JNIEnv* env, jobject obj) {
+  CefRefPtr<CefBrowser> browser = JNI_GET_BROWSER_OR_RETURN(env, obj, -1);
+  return browser->GetHost()->GetWindowlessFrameRate();
+}
+
+JNIEXPORT void JNICALL
+Java_org_cef_browser_CefBrowser_1N_N_1SetWindowlessFrameRate(JNIEnv* env,
+                                                             jobject obj,
+                                                             jint framerate) {
+  CefRefPtr<CefBrowser> browser = JNI_GET_BROWSER_OR_RETURN(env, obj);
+  browser->GetHost()->SetWindowlessFrameRate((int)framerate);
+}
diff --git a/native/CefBrowser_N.h b/native/CefBrowser_N.h
index 9e03d8c..8e16578 100644
--- a/native/CefBrowser_N.h
+++ b/native/CefBrowser_N.h
@@ -409,6 +409,14 @@ Java_org_cef_browser_CefBrowser_1N_N_1Invalidate(JNIEnv*, jobject);
 JNIEXPORT void JNICALL
 Java_org_cef_browser_CefBrowser_1N_N_1SendKeyEvent(JNIEnv*, jobject, jobject);
 
+/*
+ * Class:     org_cef_browser_CefBrowser_N
+ * Method:    N_SendDirectKeyEvent
+ * Signature: (IIIZCCZ)V
+ */
+JNIEXPORT void JNICALL
+Java_org_cef_browser_CefBrowser_1N_N_1SendDirectKeyEvent(JNIEnv*, jobject, jint, jint, jint, jint, jboolean, jchar, jchar, jboolean);
+
 /*
  * Class:     org_cef_browser_CefBrowser_N
  * Method:    N_SendMouseEvent
@@ -520,6 +528,25 @@ JNIEXPORT void JNICALL
 Java_org_cef_browser_CefBrowser_1N_N_1NotifyMoveOrResizeStarted(JNIEnv*,
                                                                 jobject);
 
+/*
+ * Class:     org_cef_browser_CefBrowser_N
+ * Method:    N_GetWindowlessFrameRate
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL
+Java_org_cef_browser_CefBrowser_1N_N_1GetWindowlessFrameRate(JNIEnv*,
+                                                             jobject);
+
+/*
+ * Class:     org_cef_browser_CefBrowser_N
+ * Method:    N_SetWindowlessFrameRate
+ * Signature: (I)V
+ */
+JNIEXPORT void JNICALL
+Java_org_cef_browser_CefBrowser_1N_N_1SetWindowlessFrameRate(JNIEnv*,
+                                                             jobject,
+                                                             jint);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/native/display_handler.cpp b/native/display_handler.cpp
index cf08868..c3f1bb1 100644
--- a/native/display_handler.cpp
+++ b/native/display_handler.cpp
@@ -9,70 +9,7 @@
 namespace {
 
 int GetCursorId(cef_cursor_type_t type) {
-  ScopedJNIEnv env;
-  if (!env)
-    return 0;
-
-  const char* cursorClassName = "java/awt/Cursor";
-  JNI_STATIC_DEFINE_INT_RV(env, ScopedJNIClass(env, cursorClassName),
-                           CROSSHAIR_CURSOR, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, ScopedJNIClass(env, cursorClassName),
-                           DEFAULT_CURSOR, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, ScopedJNIClass(env, cursorClassName),
-                           E_RESIZE_CURSOR, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, ScopedJNIClass(env, cursorClassName),
-                           HAND_CURSOR, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, ScopedJNIClass(env, cursorClassName),
-                           MOVE_CURSOR, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, ScopedJNIClass(env, cursorClassName),
-                           N_RESIZE_CURSOR, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, ScopedJNIClass(env, cursorClassName),
-                           NE_RESIZE_CURSOR, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, ScopedJNIClass(env, cursorClassName),
-                           NW_RESIZE_CURSOR, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, ScopedJNIClass(env, cursorClassName),
-                           S_RESIZE_CURSOR, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, ScopedJNIClass(env, cursorClassName),
-                           SE_RESIZE_CURSOR, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, ScopedJNIClass(env, cursorClassName),
-                           SW_RESIZE_CURSOR, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, ScopedJNIClass(env, cursorClassName),
-                           TEXT_CURSOR, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, ScopedJNIClass(env, cursorClassName),
-                           W_RESIZE_CURSOR, 0);
-  JNI_STATIC_DEFINE_INT_RV(env, ScopedJNIClass(env, cursorClassName),
-                           WAIT_CURSOR, 0);
-
-  switch (type) {
-    case CT_CROSS:
-      return JNI_STATIC(CROSSHAIR_CURSOR);
-    case CT_HAND:
-      return JNI_STATIC(HAND_CURSOR);
-    case CT_IBEAM:
-      return JNI_STATIC(TEXT_CURSOR);
-    case CT_WAIT:
-      return JNI_STATIC(WAIT_CURSOR);
-    case CT_EASTRESIZE:
-      return JNI_STATIC(E_RESIZE_CURSOR);
-    case CT_NORTHRESIZE:
-      return JNI_STATIC(N_RESIZE_CURSOR);
-    case CT_NORTHEASTRESIZE:
-      return JNI_STATIC(NE_RESIZE_CURSOR);
-    case CT_NORTHWESTRESIZE:
-      return JNI_STATIC(NW_RESIZE_CURSOR);
-    case CT_SOUTHRESIZE:
-      return JNI_STATIC(S_RESIZE_CURSOR);
-    case CT_SOUTHEASTRESIZE:
-      return JNI_STATIC(SE_RESIZE_CURSOR);
-    case CT_SOUTHWESTRESIZE:
-      return JNI_STATIC(SW_RESIZE_CURSOR);
-    case CT_WESTRESIZE:
-      return JNI_STATIC(W_RESIZE_CURSOR);
-    case CT_MOVE:
-      return JNI_STATIC(MOVE_CURSOR);
-    default:
-      return JNI_STATIC(DEFAULT_CURSOR);
-  }
+  return type;
 }
 
 }  // namespace
diff --git a/native/jni_util.cpp b/native/jni_util.cpp
index b71fc29..0bd6f9e 100644
--- a/native/jni_util.cpp
+++ b/native/jni_util.cpp
@@ -958,6 +958,20 @@ bool CallJNIMethodC_V(JNIEnv* env,
   return false;
 }
 
+bool CallJNIMethodD_V(JNIEnv* env,
+                      jclass cls,
+                      jobject obj,
+                      const char* method_name,
+                      double* value) {
+  jmethodID methodID = env->GetMethodID(cls, method_name, "()D");
+  if (methodID) {
+    *value = env->CallDoubleMethod(obj, methodID);
+    return true;
+  }
+  env->ExceptionClear();
+  return false;
+}
+
 CefSize GetJNISize(JNIEnv* env, jobject obj) {
   CefSize size;
 
diff --git a/native/jni_util.h b/native/jni_util.h
index dd9ba18..0bd0e95 100644
--- a/native/jni_util.h
+++ b/native/jni_util.h
@@ -175,6 +175,13 @@ bool CallJNIMethodC_V(JNIEnv* env,
                       const char* method_name,
                       char16_t* value);
 
+// Call a JNI method that returns a double and accepts no arguments.
+bool CallJNIMethodD_V(JNIEnv* env,
+                      jclass cls,
+                      jobject obj,
+                      const char* method_name,
+                      double* value);
+
 // Rertieve the CefSize equivalent of a java.awt.Dimension.
 CefSize GetJNISize(JNIEnv* env, jobject obj);
 
